/*
TQBH - 2023-04-17
Merge Sort Algorithm
*/

#include <iostream>
#include <cmath>

// Define function to print an array
void printarray(int array[], int length) {
  using std::cout, std::endl;
  for (int index = 0; index < length; index++) {
    cout << array[index] << " ";
  }
  cout << endl;
}

// Define merge() auxiliary function
void merge(int array[],) {
  using std::cout, std::endl;
  // Lengths of arrays L and R
  
  // Define blank  arrays L and R
  
  // Copy into arrays L and R

  // Compare merge

  // Copy the rest of either L or R into A
  
}

// Define merge-sort() function
void merge_sort(int array[], int start, int end) {
  using std::cout, std::endl;
  // Check if single or zero element, then return immediately
  if (start >= end) {
    return;
  }
  // Define mid index
  int mid = 
  // Recursive merge sort, first half
  merge_sort();
  // Recursive merge sort, second half

  // Merge

}

// Main function
int main() {
  using std::cout, std::endl;
  // Suppose we are given an unsorted array
  int A[] = { 7, 2, 4, 5, 3, 1, 9, 8, 6 };

  // Find length of array
  int len = *(&A + 1) - A;
  cout << "Length of array: " << len << endl;
  
  // Print unsorted array
  cout << "Unsorted array A:" << endl;
  printarray(A, len);

  // Perform merge sort
  // merge_sort(A, 0, len-1);

  // Print sorted array
  cout << "Sorted array A:" << endl;
  printarray(A, len);
  
  return 0;
}
